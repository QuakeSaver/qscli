/*
 * QuakeSaver Frontend API
 *
 * This implements an API for the Frontend to communicate with the Backend.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Sensor : A sensor schema to return via the API.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Sensor {
    #[serde(rename = "uid")]
    pub uid: String,
    #[serde(rename = "software_version")]
    pub software_version: String,
    #[serde(rename = "hardware_revision")]
    pub hardware_revision: String,
    #[serde(rename = "first_seen")]
    pub first_seen: String,
    #[serde(rename = "last_updated")]
    pub last_updated: String,
    // #[serde(rename = "permission")]
    // pub permission: Box<models::Permission>,
    #[serde(rename = "warnings", skip_serializing_if = "Option::is_none")]
    pub warnings: Option<Box<models::SensorWarnings>>,
    #[serde(rename = "max_data_product_count")]
    pub max_data_product_count: i32,
}

impl Sensor {
    /// A sensor schema to return via the API.
    pub fn new(uid: String, software_version: String, hardware_revision: String, first_seen: String, last_updated: String, _: models::Permission, max_data_product_count: i32) -> Sensor {
        Sensor {
            uid,
            software_version,
            hardware_revision,
            first_seen,
            last_updated,
            // permission: Box::new(permission),
            warnings: None,
            max_data_product_count,
        }
    }
}

