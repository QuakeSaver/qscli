/*
 * QuakeSaver Frontend API
 *
 * This implements an API for the Frontend to communicate with the Backend.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// User : A User schema to return via the API.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct User {
    #[serde(rename = "username")]
    pub username: String,
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "is_active", skip_serializing_if = "Option::is_none")]
    pub is_active: Option<bool>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "rabbitmq_tags")]
    pub rabbitmq_tags: Vec<String>,
    #[serde(rename = "rabbitmq_vhosts")]
    pub rabbitmq_vhosts: Vec<String>,
    #[serde(rename = "can_connect_to_rabbitmq")]
    pub can_connect_to_rabbitmq: bool,
    #[serde(rename = "uid")]
    pub uid: String,
    #[serde(rename = "is_verified")]
    pub is_verified: bool,
    #[serde(rename = "rabbitmq_access_token")]
    pub rabbitmq_access_token: String,
    #[serde(rename = "frontend_setting")]
    pub frontend_setting: Box<models::FrontendSettings>,
    #[serde(rename = "groups")]
    pub groups: Vec<String>,
    #[serde(rename = "primary_group")]
    pub primary_group: String,
    #[serde(rename = "can_debug")]
    pub can_debug: bool,
    #[serde(rename = "seedlink_ipv4_networks")]
    pub seedlink_ipv4_networks: Vec<String>,
}

impl User {
    /// A User schema to return via the API.
    pub fn new(username: String, email: String, name: String, rabbitmq_tags: Vec<String>, rabbitmq_vhosts: Vec<String>, can_connect_to_rabbitmq: bool, uid: String, is_verified: bool, rabbitmq_access_token: String, frontend_setting: models::FrontendSettings, groups: Vec<String>, primary_group: String, can_debug: bool, seedlink_ipv4_networks: Vec<String>) -> User {
        User {
            username,
            email,
            is_active: None,
            name,
            rabbitmq_tags,
            rabbitmq_vhosts,
            can_connect_to_rabbitmq,
            uid,
            is_verified,
            rabbitmq_access_token,
            frontend_setting: Box::new(frontend_setting),
            groups,
            primary_group,
            can_debug,
            seedlink_ipv4_networks,
        }
    }
}

