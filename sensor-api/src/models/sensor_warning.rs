/*
 * QuakeSaver Frontend API
 *
 * This implements an API for the Frontend to communicate with the Backend.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SensorWarning : A class representing a warning of the sensor.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SensorWarning {
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "message")]
    pub message: String,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "level", skip_serializing_if = "Option::is_none")]
    pub level: Option<Level>,
}

impl SensorWarning {
    /// A class representing a warning of the sensor.
    pub fn new(message: String, title: String) -> SensorWarning {
        SensorWarning {
            created: None,
            message,
            title,
            level: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Level {
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "critical")]
    Critical,
}

impl Default for Level {
    fn default() -> Level {
        Self::Warning
    }
}

