/*
 * QuakeSaver Frontend API
 *
 * This implements an API for the Frontend to communicate with the Backend.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MeasurementQuery : A schema for querying measurements.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MeasurementQuery {
    #[serde(rename = "start_time")]
    pub start_time: String,
    #[serde(rename = "end_time")]
    pub end_time: String,
    #[serde(rename = "measurement")]
    pub measurement: String,
    #[serde(rename = "field")]
    pub field: String,
    #[serde(rename = "interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<f64>,
    #[serde(rename = "aggregator", skip_serializing_if = "Option::is_none")]
    pub aggregator: Option<Aggregator>,
}

impl MeasurementQuery {
    /// A schema for querying measurements.
    pub fn new(start_time: String, end_time: String, measurement: String, field: String) -> MeasurementQuery {
        MeasurementQuery {
            start_time,
            end_time,
            measurement,
            field,
            interval: None,
            aggregator: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Aggregator {
    #[serde(rename = "median")]
    Median,
    #[serde(rename = "mean")]
    Mean,
    #[serde(rename = "first")]
    First,
    #[serde(rename = "last")]
    Last,
    #[serde(rename = "min")]
    Min,
    #[serde(rename = "max")]
    Max,
    #[serde(rename = "count")]
    Count,
    #[serde(rename = "unique")]
    Unique,
}

impl Default for Aggregator {
    fn default() -> Aggregator {
        Self::Median
    }
}

